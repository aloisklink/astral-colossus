/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IDarkForestCore,
  IDarkForestCoreInterface,
} from "../IDarkForestCore";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "_a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "_b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "_c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[7]",
        name: "_input",
        type: "uint256[7]",
      },
    ],
    name: "findArtifact",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "_a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "_b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "_c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[8]",
        name: "_input",
        type: "uint256[8]",
      },
    ],
    name: "initializePlayer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "planetArtifacts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "planets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "range",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "speed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "defense",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "population",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "populationCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "populationGrowth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "silverCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "silverGrowth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "silver",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "planetLevel",
            type: "uint256",
          },
          {
            internalType: "enum IDarkForestCore.PlanetType",
            name: "planetType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isHomePlanet",
            type: "bool",
          },
        ],
        internalType: "struct IDarkForestCore.Planet",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "location",
        type: "uint256",
      },
    ],
    name: "refreshPlanet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_location",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_player",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "locationId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawSilver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IDarkForestCore__factory {
  static readonly abi = _abi;
  static createInterface(): IDarkForestCoreInterface {
    return new utils.Interface(_abi) as IDarkForestCoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDarkForestCore {
    return new Contract(address, _abi, signerOrProvider) as IDarkForestCore;
  }
}
